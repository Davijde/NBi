<?xml version="1.0" encoding="utf-8" ?>
<testSuite name="Acceptance Testing: ResultSet" xmlns="http://NBi/TestSuite">
  <settings>
    <default apply-to="system-under-test">
      <connectionString>Data Source=mhknbn2kdz.database.windows.net;Initial Catalog=AdventureWorks2012;User Id=sqlfamily;password=sqlf@m1ly</connectionString>
    </default>
    <default apply-to="assert">
      <connectionString>Data Source=mhknbn2kdz.database.windows.net;Initial Catalog=AdventureWorks2012;User Id=sqlfamily;password=sqlf@m1ly</connectionString>
    </default>
    <default apply-to="variable">
      <connectionString>Data Source=mhknbn2kdz.database.windows.net;Initial Catalog=AdventureWorks2012;User Id=sqlfamily;password=sqlf@m1ly</connectionString>
    </default>
    <reference name="ref1">
      <connectionString>Data Source=mhknbn2kdz.database.windows.net;Initial Catalog=AdventureWorks2012;User Id=sqlfamily;password=sqlf@m1ly</connectionString>
    </reference>
  </settings>
  <variables>
    <variable name="var1">
      <query-scalar>select 1963</query-scalar>
    </variable>
    <variable name="CY2007">
      <script language="c-sharp">"CY 2007"</script>
    </variable>
    <variable name="year">
      <script language="c-sharp">new DateTime(2006, 1, 1)</script>
    </variable>
  </variables>
  <group name="asserts">
    <test name="Csv equal to embedded result-set" uid="0001">
      <system-under-test>
        <resultSet file="..\Csv\ResellerOrderCountByYearBefore2006.csv"/>
      </system-under-test>
      <assert>
        <equalTo>
          <resultSet>
            <row>
              <cell>CY 2005</cell>
              <cell>366</cell>
            </row>
            <row>
              <cell>CY 2006</cell>
              <cell>1015</cell>
            </row>
            <row>
              <cell>CY 2007</cell>
              <cell>1521</cell>
            </row>
            <row>
              <cell>CY 2008</cell>
              <cell>894</cell>
            </row>
          </resultSet>
        </equalTo>
      </assert>
    </test>
    <test name="all are less than 10000" uid="0002">
      <system-under-test>
        <resultSet file="..\Csv\ResellerOrderCountByYearBefore2006.csv"/>
      </system-under-test>
      <assert>
        <all-rows>
          <predicate name="#1">
            <less-than>10000</less-than>
          </predicate>
        </all-rows>
      </assert>
    </test>
    <test name="none are more than 10000" uid="0003">
      <system-under-test>
        <resultSet file="..\Csv\ResellerOrderCountByYearBefore2006.csv"/>
      </system-under-test>
      <assert>
        <no-rows>
          <predicate name="#1">
            <more-than>10000</more-than>
          </predicate>
        </no-rows>
      </assert>
    </test>
    <test name="some are less than 1000" uid="0004">
      <system-under-test>
        <resultSet file="..\Csv\ResellerOrderCountByYearBefore2006.csv"/>
      </system-under-test>
      <assert>
        <some-rows>
          <predicate name="#1">
            <less-than>1000</less-than>
          </predicate>
        </some-rows>
      </assert>
    </test>
    <test name="single is more than 1500" uid="0005">
      <system-under-test>
        <resultSet file="..\Csv\ResellerOrderCountByYearBefore2006.csv"/>
      </system-under-test>
      <assert>
        <single-row>
          <predicate name="#1">
            <more-than>1500</more-than>
          </predicate>
        </single-row>
      </assert>
    </test>
    <test name="'rows are unique" uid="0006">
      <system-under-test>
        <resultSet file="..\Csv\ResellerOrderCountByYearBefore2006.csv"/>
      </system-under-test>
      <assert>
        <unique-rows/>
      </assert>
    </test>
    <test name="return 4 rows" uid="0007">
      <system-under-test>
        <resultSet file="..\Csv\ResellerOrderCountByYearBefore2006.csv"/>
      </system-under-test>
      <assert>
        <row-count>
          <equal>4</equal>
        </row-count>
      </assert>
    </test>
    <test name="references exist" uid="00080">
      <system-under-test>
        <resultSet file="..\Csv\Orders.csv"/>
      </system-under-test>
      <assert>
        <lookup-exists>
          <join>
            <mapping candidate="#2" reference="#0" type="text"/>
          </join>
          <result-set>
            <query connection-string="@ref1">select 'CUST0001' union all select 'CUST0002' union all select 'CUST0003'</query>
          </result-set>
        </lookup-exists>
      </assert>
    </test>
    <test name="lookup-exist" uid="00081">
      <system-under-test>
        <result-set file="..\Csv\Orders.csv"/>
      </system-under-test>
      <assert>
        <lookup-exists>
          <join>
            <mapping candidate="#2" reference="#0" type="text"/>
          </join>
          <resultSet>
            <query>select 'CUST0001' union all select 'CUST0002' union all select 'CUST0003'</query>
          </resultSet>
        </lookup-exists>
      </assert>
    </test>
    <test name="lookup-exist with using" uid="00082">
      <system-under-test>
        <resultSet file="..\Csv\Orders.csv"/>
      </system-under-test>
      <assert>
        <lookup-exists>
          <join>
            <using type="text">#2</using>
          </join>
          <resultSet>
            <query>select 'Foo', 'A', 'CUST0001' union all select 'Foo', 'A', 'CUST0002' union all select 'Bar', 'B', 'CUST0003'</query>
          </resultSet>
        </lookup-exists>
      </assert>
    </test>
    <test name="lookup-exist reversed" uid="00081">
      <system-under-test>
        <result-set>
          <query>select 'CUST0001' union all select 'CUST0002' union all select 'CUST0003' union all select 'NOT EXISTING'</query>
        </result-set>
      </system-under-test>
      <assert>
        <lookup-exists reverse="true">
          <join>
            <mapping candidate="#2" reference="#0" type="text"/>
          </join>
          <result-set file="..\Csv\Orders.csv"/>
        </lookup-exists>
      </assert>
    </test>
    <test name="lookup-matches" uid="00091">
      <system-under-test>
        <result-set>
          <query>
            select 
              NationalIdNumber,
              h.[DepartmentID]as DepartmentID,
              d.Name as DepartmentName
            from 
              [HumanResources].[Employee] e
            inner join [HumanResources].[EmployeeDepartmentHistory] 
              h on e.BusinessEntityId = h.BusinessEntityId
            inner join [HumanResources].[Department] d on 
              h.DepartmentId = d.DepartmentId
          </query>
        </result-set>
      </system-under-test>
      <assert>
        <lookup-matches>
          <join>
            <mapping candidate="DepartmentID" reference="Id" type="numeric"/>
          </join>
          <inclusion>
            <mapping candidate="DepartmentName" reference="Name" type="text"/>
          </inclusion>
          <result-set>
            <query>
              select [DepartmentID] as Id, [Name] from [HumanResources].[Department]
            </query>
          </result-set>
        </lookup-matches>
      </assert>
    </test>
  </group>
  <group name="system-under-tests">
    <test name="Embedded result-set" uid="0101">
      <system-under-test>
        <resultSet>
          <row>
            <cell>CY 2005</cell>
            <cell>366</cell>
          </row>
          <row>
            <cell>CY 2006</cell>
            <cell>1015</cell>
          </row>
          <row>
            <cell>CY 2007</cell>
            <cell>1521</cell>
          </row>
          <row>
            <cell>CY 2008</cell>
            <cell>894</cell>
          </row>
        </resultSet>
      </system-under-test>
      <assert>
        <unique-rows/>
      </assert>
    </test>
    <test name="External result-set" uid="0102">
      <system-under-test>
        <resultSet file="..\Csv\ResellerOrderCountByYearBefore2006.csv"/>
      </system-under-test>
      <assert>
        <unique-rows/>
      </assert>
    </test>
    <test name="External result-set defined with variable formatting" uid="0103">
      <system-under-test>
        <resultSet file="~..\Csv\ResellerOrderCountByYearBefore{@year:yyyy}.csv"/>
      </system-under-test>
      <assert>
        <unique-rows/>
      </assert>
    </test>
    <test name="External result-set with if-missing" uid="0103">
      <system-under-test>
        <result-set>
          <file>
            <path>~..\Csv\ResellerOrderCountByYearBefore{@year:yy}.csv</path>
            <if-missing>
              <file>
                <path>..\Csv\ResellerOrderCountByYearBefore2006.csv</path>
              </file>
            </if-missing>
          </file>
        </result-set>
      </system-under-test>
      <assert>
        <unique-rows/>
      </assert>
    </test>
    <test name="Embedded query" uid="0104">
      <system-under-test>
        <resultSet>
          <query>
            select @prefix + ' 2005' as [year], 366 as [value]
            union all select @prefix + ' 2006' as [year], 1015 as [value]
            union all select @prefix + ' 2007' as [year], 1521 as [value]
            union all select @prefix + ' 2008' as [year], 894 as [value]
            <parameter name="prefix">CY</parameter>
          </query>
        </resultSet>
      </system-under-test>
      <assert>
        <all-rows>
          <predicate name="#0" type="text">
            <starts-with>CY </starts-with>
          </predicate>
        </all-rows>
      </assert>
    </test>
    <test name="External query" uid="0105">
      <system-under-test>
        <resultSet>
          <query file="..\Query\ResellerOrderCount.sql">
            <parameter name="prefix">CY</parameter>
          </query>
        </resultSet>
      </system-under-test>
      <assert>
        <all-rows>
          <predicate name="#0" type="text">
            <starts-with>CY </starts-with>
          </predicate>
        </all-rows>
      </assert>
    </test>
    <test name="Query from assembly" uid="0106">
      <system-under-test>
        <resultSet>
          <query>
            <assembly path="..\..\..\NBi.Testing.dll" class="NBi.Testing.Acceptance.Resources.AssemblyClass" method="GetTextSelectSql">
              <method-parameter name="prefix">CY</method-parameter>
            </assembly>
          </query>
        </resultSet>
      </system-under-test>
      <assert>
        <equalTo>
          <resultSet file="..\Csv\ResellerOrderCountByYearBefore2006.csv"/>
        </equalTo>
      </assert>
    </test>
    <test name="Query from report" uid="0107">
      <condition>
        <service-running name="MSSQL$SQL2017"/>
      </condition>
      <system-under-test>
        <resultSet>
          <query>
            <report source="Data Source=(local)\SQL2017;Initial Catalog=ReportServer;Integrated Security=True;"
                path="/AdventureWorks 2012/"
                name="Store_Contacts"
                dataset="Stores"
				    />
          </query>
        </resultSet>
      </system-under-test>
      <assert>
        <equalTo values-default-type="text">
          <resultSet file="..\Csv\BusinessEntity.csv"/>
        </equalTo>
      </assert>
    </test>
    <test name="Query with variable" uid="0108">
      <system-under-test>
        <resultSet>
          <query>
            select LoginID, JobTitle from [HumanResources].[Employee] where year([BirthDate])=@maxid
            <parameter name="maxid">@var1</parameter>
          </query>
        </resultSet>
      </system-under-test>
      <assert>
        <equalTo values-default-type="text">
          <resultSet>
            <row>
              <cell>adventure-works\ken0</cell>
              <cell>Chief Executive Officer</cell>
            </row>
            <row>
              <cell>adventure-works\belinda0</cell>
              <cell>Production Technician - WC45</cell>
            </row>
            <row>
              <cell>adventure-works\michael9</cell>
              <cell>Sales Representative</cell>
            </row>
          </resultSet>
        </equalTo>
      </assert>
    </test>
    <test name="Result-set is the cartesian product of two sequences" uid="0130">
      <system-under-test>
        <result-set>
          <sequences-combination operation="cartesian-product">
            <sequence type="text">
              <item>be</item>
              <item>fr</item>
            </sequence>
            <sequence type="dateTime">
              <loop-sentinel seed="2015-01-01" terminal="2017-01-01" step="1 year"/>
            </sequence>
          </sequences-combination>
        </result-set>
      </system-under-test>
      <assert>
        <equal-to>
          <column index="0" role="key" type="text"/>
          <column index="1" role="key" type="dateTime"/>
          <resultSet>
            <row>
              <cell>be</cell>
              <cell>2015-01-01</cell>
            </row>
            <row>
              <cell>fr</cell>
              <cell>2015-01-01</cell>
            </row>
            <row>
              <cell>be</cell>
              <cell>2016-01-01</cell>
            </row>
            <row>
              <cell>fr</cell>
              <cell>2016-01-01</cell>
            </row>
            <row>
              <cell>be</cell>
              <cell>2017-01-01</cell>
            </row>
            <row>
              <cell>fr</cell>
              <cell>2017-01-01</cell>
            </row>
          </resultSet>
        </equal-to>
      </assert>
    </test>
  </group>
  <group name="alterations">
    <test name="Filter with one predicate" uid="0201">
      <system-under-test>
        <resultSet file="..\Csv\ResellerOrderCountByYearBefore2006.csv">
          <alteration>
            <filter>
              <predicate name="#0" type="text">
                <less-than>CY 2007</less-than>
              </predicate>
            </filter>
          </alteration>
        </resultSet>
      </system-under-test>
      <assert>
        <equalTo>
          <resultSet>
            <row>
              <cell>CY 2005</cell>
              <cell>366</cell>
            </row>
            <row>
              <cell>CY 2006</cell>
              <cell>1015</cell>
            </row>
          </resultSet>
        </equalTo>
      </assert>
    </test>
    <test name="Filter with two predicates" uid="0202">
      <system-under-test>
        <resultSet file="..\Csv\ResellerOrderCountByYearBefore2006.csv">
          <alteration>
            <filter>
              <combination operator="or">
                <predicate name="#0" type="text">
                  <less-than>CY 2007</less-than>
                </predicate>
                <predicate name="#1" type="numeric">
                  <more-than>1500</more-than>
                </predicate>
              </combination>
            </filter>
          </alteration>
        </resultSet>
      </system-under-test>
      <assert>
        <equalTo>
          <resultSet>
            <row>
              <cell>CY 2005</cell>
              <cell>366</cell>
            </row>
            <row>
              <cell>CY 2006</cell>
              <cell>1015</cell>
            </row>
            <row>
              <cell>CY 2007</cell>
              <cell>1521</cell>
            </row>
          </resultSet>
        </equalTo>
      </assert>
    </test>
    <test name="Filter with one predicate (but in a combination)" uid="0203">
      <system-under-test>
        <resultSet file="..\Csv\ResellerOrderCountByYearBefore2006.csv">
          <alteration>
            <filter>
              <combination operator="or">
                <predicate name="#0" type="text">
                  <less-than>CY 2007</less-than>
                </predicate>
              </combination>
            </filter>
          </alteration>
        </resultSet>
      </system-under-test>
      <assert>
        <equalTo>
          <resultSet>
            <row>
              <cell>CY 2005</cell>
              <cell>366</cell>
            </row>
            <row>
              <cell>CY 2006</cell>
              <cell>1015</cell>
            </row>
          </resultSet>
        </equalTo>
      </assert>
    </test>
    <test name="Filter with one predicate and a reference variable" uid="0204">
      <system-under-test>
        <resultSet file="..\Csv\ResellerOrderCountByYearBefore2006.csv">
          <alteration>
            <filter>
              <predicate name="#0" type="text">
                <less-than>@CY2007</less-than>
              </predicate>
            </filter>
          </alteration>
        </resultSet>
      </system-under-test>
      <assert>
        <equalTo>
          <resultSet>
            <row>
              <cell>CY 2005</cell>
              <cell>366</cell>
            </row>
            <row>
              <cell>CY 2006</cell>
              <cell>1015</cell>
            </row>
          </resultSet>
        </equalTo>
      </assert>
    </test>
    <test name="Filter with one ranking top" uid="0211">
      <system-under-test>
        <resultSet file="..\Csv\ResellerOrderCountByYearBefore2006.csv">
          <alteration>
            <filter>
              <ranking operand="#1">
                <top count="2"/>
              </ranking>
            </filter>
          </alteration>
        </resultSet>
      </system-under-test>
      <assert>
        <all-rows>
          <predicate operand="#1">
            <more-than>1000</more-than>
          </predicate>
        </all-rows>
      </assert>
    </test>
    <test name="Filter with one ranking bottom" uid="0212">
      <system-under-test>
        <resultSet file="..\Csv\Orders.csv">
          <alteration>
            <filter>
              <ranking operand="#3">
                <bottom/>
                <group-by>
                  <column identifier="#2" type="text"/>
                </group-by>
              </ranking>
            </filter>
          </alteration>
        </resultSet>
      </system-under-test>
      <assert>
        <all-rows>
          <predicate operand="#0">
            <more-than>1</more-than>
          </predicate>
        </all-rows>
      </assert>
    </test>
    <test name="Conversion with text-to-date" uid="0221">
      <system-under-test>
        <resultSet file="..\Csv\Orders.csv">
          <alteration>
            <convert column="#1">
              <text-to-date culture="fr-fr" default-value="2016-01-01"/>
            </convert>
          </alteration>
        </resultSet>
      </system-under-test>
      <assert>
        <equalTo keys="first">
          <column index="0" role="key" type="numeric"/>
          <column index="1" role="value" type="dateTime"/>
          <column index="2" role="value" type="text"/>
          <resultSet>
            <row>
              <cell>1</cell>
              <cell>2017-07-06</cell>
              <cell>CUST0001</cell>
              <cell>100</cell>
            </row>
            <row>
              <cell>2</cell>
              <cell>2017-07-17</cell>
              <cell>CUST0001</cell>
              <cell>80</cell>
            </row>
            <row>
              <cell>3</cell>
              <cell>2017-01-08</cell>
              <cell>CUST0002</cell>
              <cell>120</cell>
            </row>
            <row>
              <cell>4</cell>
              <cell>2016-01-01</cell>
              <cell>CUST0002</cell>
              <cell>80</cell>
            </row>
            <row>
              <cell>5</cell>
              <cell>2017-12-18</cell>
              <cell>CUST0003</cell>
              <cell>55</cell>
            </row>
          </resultSet>
        </equalTo>
      </assert>
    </test>
    <test name="Conversion with text-to-date previously filtered by matches-date" uid="0222">
      <system-under-test>
        <resultSet file="..\Csv\Orders.csv">
          <alteration>
            <filter>
              <predicate operand="#1" type="text">
                <matches-date culture="fr-fr"/>
              </predicate>
            </filter>
            <convert column="#1">
              <text-to-date culture="fr-fr"/>
            </convert>
          </alteration>
        </resultSet>
      </system-under-test>
      <assert>
        <equalTo keys="first">
          <column index="0" role="key" type="numeric"/>
          <column index="1" role="value" type="dateTime"/>
          <column index="2" role="value" type="text"/>
          <resultSet>
            <row>
              <cell>1</cell>
              <cell>2017-07-06</cell>
              <cell>CUST0001</cell>
              <cell>100</cell>
            </row>
            <row>
              <cell>2</cell>
              <cell>2017-07-17</cell>
              <cell>CUST0001</cell>
              <cell>80</cell>
            </row>
            <row>
              <cell>3</cell>
              <cell>2017-01-08</cell>
              <cell>CUST0002</cell>
              <cell>120</cell>
            </row>
            <row>
              <cell>5</cell>
              <cell>2017-12-18</cell>
              <cell>CUST0003</cell>
              <cell>55</cell>
            </row>
          </resultSet>
        </equalTo>
      </assert>
    </test>
    <test name="Transformations" uid="0230">
      <system-under-test>
        <resultSet file="..\Csv\Orders.csv">
          <alteration>
            <transform column-index="0" language="c-sharp" original-type="text">
              "AA" + value;
            </transform>
            <transform column-index="1" language="c-sharp" original-type="text">
              value.Substring(value.Length - 4);
            </transform>
            <transform column-index="2" language="c-sharp" original-type="text">
              value.Substring(value.LastIndexOf("0")+1)
            </transform>
          </alteration>
        </resultSet>
      </system-under-test>
      <assert>
        <equalTo keys="all-except-last">
          <resultSet>
            <row>
              <cell>AA0001</cell>
              <cell>2017</cell>
              <cell>1</cell>
              <cell>100</cell>
            </row>
            <row>
              <cell>AA0002</cell>
              <cell>2017</cell>
              <cell>1</cell>
              <cell>80</cell>
            </row>
            <row>
              <cell>AA0003</cell>
              <cell>2017</cell>
              <cell>2</cell>
              <cell>120</cell>
            </row>
            <row>
              <cell>AA0004</cell>
              <cell>2017</cell>
              <cell>2</cell>
              <cell>80</cell>
            </row>
            <row>
              <cell>AA0005</cell>
              <cell>2017</cell>
              <cell>3</cell>
              <cell>55</cell>
            </row>
          </resultSet>
        </equalTo>
      </assert>
    </test>
    <test name="Transformations" uid="0231">
      <system-under-test>
        <resultSet>
          <query>
            select 'a', 'FOO' union all select 'B', 'bar'
          </query>
          <alteration>
            <transform column-index="0" language="native" original-type="text">
              text-to-upper
            </transform>
          </alteration>
        </resultSet>
      </system-under-test>
      <assert>
        <equalTo keys="first">
          <column index="0" type="text" role="key">
            <transform language="native" original-type="text">text-to-upper</transform>
          </column>
          <column index="1" type="text" role="value" tolerance="ignore-case"/>
          <resultSet>
            <row>
              <cell>A</cell>
              <cell>foo</cell>
            </row>
            <row>
              <cell>b</cell>
              <cell>BaR</cell>
            </row>
          </resultSet>
        </equalTo>
      </assert>
    </test>
  </group>
</testSuite>
